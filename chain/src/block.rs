use block_header::BlockHeader;
use transaction::Transaction;
use primitives::{H256, H256_LENGTH};
use format::{Deserialize, DeserializerStream, Error, Serialize, SerializerStream, to_binary};
use bytes::{BytesMut, BufMut};
use varint;

/// A block.
#[derive(Debug, Clone)]
pub struct Block {
    pub header: BlockHeader,
    pub miner_tx: Transaction,
    pub tx_hashes: Vec<H256>,
}

impl Block {
    /// Calculate block PoW (CryptoNight) hash.
    pub fn hash(&self) -> H256 {
        H256::slow_hash(self.hashable_blob())
    }

    /// Calculate the block identifier.
    pub fn id(&self) -> H256 {
        let hashable_blob = self.hashable_blob();
        let mut id_blob = BytesMut::with_capacity(hashable_blob.len() + 4);
        varint::write(&mut id_blob, hashable_blob.len());
        id_blob.unsplit(hashable_blob);

        H256::fast_hash(id_blob)
    }

    fn hashable_blob(&self) -> BytesMut {
        let mut buf: BytesMut = to_binary(&self.header).into();
        let tree_hash = self.transaction_tree_hash();
        buf.reserve(tree_hash.as_bytes().len());
        buf.put(tree_hash.as_bytes());
        varint::write(&mut buf, self.tx_hashes.len() + 1);
        buf
    }

    fn transaction_tree_hash(&self) -> H256 {
        H256::tree_hash(self.build_tree_ids())
    }

    fn build_tree_ids(&self) -> Vec<H256> {
        let mut txids = Vec::with_capacity(self.tx_hashes.len() + 1);
        txids.push(self.miner_tx.id());
        txids.extend_from_slice(self.tx_hashes.as_slice());
        txids
    }
}

impl Deserialize for Block {
    fn deserialize(deserializer: &mut DeserializerStream) -> Result<Self, Error> {
        let header = deserializer.get_deserializable()?;
        let miner_tx = deserializer.get_deserializable()?;

        let tx_hashes_length = deserializer.get_u64_varint().map(|v| v as usize)?;
        let mut tx_hashes = Vec::with_capacity(tx_hashes_length);

        for _ in 0..tx_hashes_length {
            let hash: H256 = deserializer.get_deserializable()?;
            tx_hashes.push(hash);
        }

        Ok(Block {
               header,
               miner_tx,
               tx_hashes,
           })
    }
}

impl Serialize for Block {
    fn serialize(&self, mut serializer: SerializerStream) {
        serializer.put_serializable(&self.header);
        serializer.put_serializable(&self.miner_tx);

        serializer.put_u64_varint(self.tx_hashes.len() as u64);
        for txid in self.tx_hashes.iter() {
            serializer.put_serializable(txid);
        }
    }

    fn len(&self) -> usize {
        use varint;

        let mut sum = 0;
        sum += self.header.len();
        sum += self.miner_tx.len();
        sum += varint::length(self.tx_hashes.len());
        sum += self.tx_hashes.len() * H256_LENGTH;
        sum
    }
}

#[cfg(test)]
pub mod tests {
    use format::to_binary;
    use block::Block;
    use block_header::BlockHeader;
    use transaction::{SignatureType, Transaction, TransactionPrefix, TxInGen, TxOut, TxOutToKey};

    #[test]
    fn test_block_15800() {
        const BLOB: &'static [u8] =
            &[0x01, 0x00, 0xd4, 0x9b, 0xfb, 0x9a, 0x05, 0xd4, 0x53, 0x60, 0x92, 0xa8, 0x59, 0x8b,
              0x69, 0x6d, 0x5f, 0x7c, 0x25, 0xfd, 0x14, 0xf9, 0x47, 0xc9, 0x52, 0xd4, 0x39, 0x2a,
              0xbd, 0x25, 0xf3, 0xcb, 0x68, 0x20, 0x9a, 0x67, 0xcc, 0x99, 0xfa, 0xa6, 0x6e, 0x97,
              0x24, 0x01, 0xf4, 0x7b, 0x01, 0xff, 0xb8, 0x7b, 0x08, 0xae, 0xd2, 0x1c, 0x02, 0xfc,
              0x0e, 0xb2, 0x08, 0x66, 0xd6, 0x46, 0xfe, 0x9f, 0x8b, 0x99, 0x07, 0x68, 0x57, 0xba,
              0x3a, 0xbe, 0xec, 0x9f, 0x17, 0xcf, 0x25, 0x2c, 0x1b, 0x97, 0xd4, 0x20, 0xff, 0xf6,
              0x4c, 0xfb, 0xf0, 0xc0, 0x96, 0xb1, 0x02, 0x02, 0x30, 0x73, 0xe7, 0x0b, 0xcf, 0x29,
              0x01, 0x98, 0x76, 0x12, 0x21, 0x49, 0x70, 0x9b, 0x99, 0x0b, 0x37, 0x1c, 0x1b, 0x04,
              0x41, 0xef, 0x62, 0x3a, 0xa1, 0xcd, 0x3a, 0xb0, 0x83, 0x11, 0xb9, 0x7d, 0x80, 0xda,
              0xc4, 0x09, 0x02, 0x02, 0x76, 0xae, 0x20, 0x5c, 0x30, 0x3a, 0x93, 0xab, 0xb7, 0xc9,
              0x9b, 0x67, 0x9f, 0x3c, 0x9f, 0x3b, 0xe2, 0xc2, 0x78, 0x6d, 0xbc, 0x31, 0x01, 0x40,
              0x7c, 0x89, 0x36, 0x1a, 0x37, 0x07, 0xcf, 0x80, 0xc6, 0x86, 0x8f, 0x01, 0x02, 0xad,
              0xd3, 0xd2, 0x47, 0xf6, 0x52, 0xec, 0xda, 0x49, 0xc5, 0x2f, 0x76, 0x0f, 0xf6, 0x52,
              0x62, 0xf8, 0x03, 0x6e, 0x8d, 0x4f, 0x45, 0x5d, 0x50, 0xf1, 0x61, 0x66, 0xf6, 0xd6,
              0x9a, 0x33, 0x0c, 0x80, 0xd8, 0x8e, 0xe1, 0x6f, 0x02, 0x70, 0x36, 0x16, 0xe2, 0x4f,
              0x23, 0x9c, 0xe8, 0xe7, 0xa8, 0xea, 0xf9, 0xb3, 0x34, 0x79, 0xe8, 0x3d, 0x5c, 0xfa,
              0x61, 0xdd, 0xb9, 0x0d, 0xe5, 0xc0, 0x79, 0x58, 0xa7, 0x62, 0x0b, 0xa1, 0x04, 0x80,
              0xf0, 0x92, 0xcb, 0xdd, 0x08, 0x02, 0x48, 0x92, 0xff, 0x86, 0x2f, 0xa7, 0xb7, 0x57,
              0x17, 0x8e, 0xa0, 0x3f, 0x4f, 0xda, 0x35, 0xcc, 0x81, 0x36, 0xf4, 0xb9, 0x52, 0x65,
              0x6e, 0xc7, 0x98, 0x4f, 0xc4, 0x5b, 0xce, 0x3a, 0x12, 0x1f, 0x80, 0xe0, 0x8d, 0x84,
              0xdd, 0xcb, 0x01, 0x02, 0x6c, 0x08, 0x6e, 0xc3, 0x3a, 0x66, 0x31, 0x25, 0xc3, 0x33,
              0xf7, 0x79, 0xe9, 0x41, 0xb8, 0xe5, 0xf6, 0xe0, 0x65, 0xb0, 0x23, 0x97, 0x7d, 0x79,
              0x31, 0x49, 0x95, 0xbf, 0x62, 0x82, 0xb4, 0xbb, 0x80, 0xc0, 0xca, 0xf3, 0x84, 0xa3,
              0x02, 0x02, 0x3d, 0x71, 0x6d, 0x2f, 0xfd, 0x3a, 0x44, 0x4b, 0xcc, 0xc7, 0x34, 0x6b,
              0x74, 0xe1, 0xb6, 0x1d, 0x3a, 0x9f, 0x8a, 0x0c, 0x60, 0xdf, 0xfd, 0x49, 0xc6, 0x8a,
              0x27, 0xac, 0x38, 0x6a, 0x88, 0x22, 0x21, 0x01, 0x17, 0x67, 0x28, 0xd3, 0x95, 0x20,
              0xe3, 0xa3, 0x39, 0x6b, 0x5d, 0x0e, 0xdf, 0x23, 0xec, 0x51, 0x2f, 0xf6, 0x1d, 0x13,
              0x16, 0xf7, 0x62, 0x51, 0xd4, 0x9e, 0x18, 0x80, 0xd3, 0x02, 0xdd, 0x36, 0x00];
        let block_15800 = Block {
            header: BlockHeader {
                major_version: 1,
                minor_version: 0,
                timestamp: 1398722004,
                prev_id: [0xd4, 0x53, 0x60, 0x92, 0xa8, 0x59, 0x8b, 0x69, 0x6d, 0x5f, 0x7c, 0x25,
                          0xfd, 0x14, 0xf9, 0x47, 0xc9, 0x52, 0xd4, 0x39, 0x2a, 0xbd, 0x25, 0xf3,
                          0xcb, 0x68, 0x20, 0x9a, 0x67, 0xcc, 0x99, 0xfa]
                        .into(),
                nonce: 613904038,
            },
            miner_tx: Transaction {
                prefix: TransactionPrefix {
                    version: 1,
                    unlock_time: 15860,
                    vin: vec![TxInGen { height: 15800 }.into()],
                    vout: vec![TxOut {
                                   amount: 469294,
                                   target: TxOutToKey {
                                           key: [0xfc, 0x0e, 0xb2, 0x08, 0x66, 0xd6, 0x46, 0xfe,
                                                 0x9f, 0x8b, 0x99, 0x07, 0x68, 0x57, 0xba, 0x3a,
                                                 0xbe, 0xec, 0x9f, 0x17, 0xcf, 0x25, 0x2c, 0x1b,
                                                 0x97, 0xd4, 0x20, 0xff, 0xf6, 0x4c, 0xfb, 0xf0]
                                                   .into(),
                                       }
                                       .into(),
                               },
                               TxOut {
                                   amount: 5000000,
                                   target: TxOutToKey {
                                           key: [0x30, 0x73, 0xe7, 0x0b, 0xcf, 0x29, 0x01, 0x98,
                                                 0x76, 0x12, 0x21, 0x49, 0x70, 0x9b, 0x99, 0x0b,
                                                 0x37, 0x1c, 0x1b, 0x04, 0x41, 0xef, 0x62, 0x3a,
                                                 0xa1, 0xcd, 0x3a, 0xb0, 0x83, 0x11, 0xb9, 0x7d]
                                                   .into(),
                                       }
                                       .into(),
                               },
                               TxOut {
                                   amount: 20000000,
                                   target: TxOutToKey {
                                           key: [0x02, 0x76, 0xae, 0x20, 0x5c, 0x30, 0x3a, 0x93,
                                                 0xab, 0xb7, 0xc9, 0x9b, 0x67, 0x9f, 0x3c, 0x9f,
                                                 0x3b, 0xe2, 0xc2, 0x78, 0x6d, 0xbc, 0x31, 0x01,
                                                 0x40, 0x7c, 0x89, 0x36, 0x1a, 0x37, 0x07, 0xcf]
                                                   .into(),
                                       }
                                       .into(),
                               },
                               TxOut {
                                   amount: 300000000,
                                   target: TxOutToKey {
                                           key: [0xad, 0xd3, 0xd2, 0x47, 0xf6, 0x52, 0xec, 0xda,
                                                 0x49, 0xc5, 0x2f, 0x76, 0x0f, 0xf6, 0x52, 0x62,
                                                 0xf8, 0x03, 0x6e, 0x8d, 0x4f, 0x45, 0x5d, 0x50,
                                                 0xf1, 0x61, 0x66, 0xf6, 0xd6, 0x9a, 0x33, 0x0c]
                                                   .into(),
                                       }
                                       .into(),
                               },
                               TxOut {
                                   amount: 30000000000,
                                   target: TxOutToKey {
                                           key: [0x70, 0x36, 0x16, 0xe2, 0x4f, 0x23, 0x9c, 0xe8,
                                                 0xe7, 0xa8, 0xea, 0xf9, 0xb3, 0x34, 0x79, 0xe8,
                                                 0x3d, 0x5c, 0xfa, 0x61, 0xdd, 0xb9, 0x0d, 0xe5,
                                                 0xc0, 0x79, 0x58, 0xa7, 0x62, 0x0b, 0xa1, 0x04]
                                                   .into(),
                                       }
                                       .into(),
                               },
                               TxOut {
                                   amount: 300000000000,
                                   target: TxOutToKey {
                                           key: [0x48, 0x92, 0xff, 0x86, 0x2f, 0xa7, 0xb7, 0x57,
                                                 0x17, 0x8e, 0xa0, 0x3f, 0x4f, 0xda, 0x35, 0xcc,
                                                 0x81, 0x36, 0xf4, 0xb9, 0x52, 0x65, 0x6e, 0xc7,
                                                 0x98, 0x4f, 0xc4, 0x5b, 0xce, 0x3a, 0x12, 0x1f]
                                                   .into(),
                                       }
                                       .into(),
                               },
                               TxOut {
                                   amount: 7000000000000,
                                   target: TxOutToKey {
                                           key: [0x6c, 0x08, 0x6e, 0xc3, 0x3a, 0x66, 0x31, 0x25,
                                                 0xc3, 0x33, 0xf7, 0x79, 0xe9, 0x41, 0xb8, 0xe5,
                                                 0xf6, 0xe0, 0x65, 0xb0, 0x23, 0x97, 0x7d, 0x79,
                                                 0x31, 0x49, 0x95, 0xbf, 0x62, 0x82, 0xb4, 0xbb]
                                                   .into(),
                                       }
                                       .into(),
                               },
                               TxOut {
                                   amount: 10000000000000,
                                   target: TxOutToKey {
                                           key: [0x3d, 0x71, 0x6d, 0x2f, 0xfd, 0x3a, 0x44, 0x4b,
                                                 0xcc, 0xc7, 0x34, 0x6b, 0x74, 0xe1, 0xb6, 0x1d,
                                                 0x3a, 0x9f, 0x8a, 0x0c, 0x60, 0xdf, 0xfd, 0x49,
                                                 0xc6, 0x8a, 0x27, 0xac, 0x38, 0x6a, 0x88, 0x22]
                                                   .into(),
                                       }
                                       .into(),
                               }],
                    extra: vec![1, 23, 103, 40, 211, 149, 32, 227, 163, 57, 107, 93, 14, 223, 35,
                                236, 81, 47, 246, 29, 19, 22, 247, 98, 81, 212, 158, 24, 128, 211,
                                2, 221, 54],
                },
                signature_type: SignatureType::Normal(vec![]),
            },
            tx_hashes: vec![],
        };

        let blob = to_binary(&block_15800);
        assert_eq!(&*blob, BLOB);
    }
}
